import pandas as pd

dict_data = {'a':1, 'b':2, 'c':3}

# 판다스 series() 함수로 딕셔너리를 시리즈로 변환, 변수 sr에 저장
sr = pd.Series(dict_data)
print(sr)
--> 
<class 'pandas.core.series.Series'>


#  데이터프레임
#  2차원 배열
#  여러 개의 열벡터(시리즈)들이 같은 행 인덱스를 기준으로 결합된 2차원 벡터 또는 행렬(matrix)
#  행과 열을 나타내기 위해서 행 인덱스와 열 이름 2가지 종류의 주소를 사용

#  열은 공통의 속성을 갖는 일련의 데이터 집합
#  행은 공통적이고 다양한 속성데이터들의 모임인 레코드

#  데이터프레임을 만들기 위해 같은 길이의 1차원 배열(Series)이 여러 개 필요
#  딕셔너리 값에 해당하는 각 리스트가 시리즈 배열로 변환되어 데이터 프레임의 열이 됨
#  딕셔너리의 키는 각 시리즈의 이름으로 변환되어 데이터 프레임의 열 이름이 됨
#  데이터프레임을 만들 때는 pandas의 DataFrame() 함수를 사용
#  딕셔너리 -> 데이터 프레임 변환: pandas.DataFrame(딕셔너리객체)


import pandas as pd

dict_data = {'c0':[1, 2, 3], 'c1':[4, 5 ,6], 'c2':[7, 8, 9], 'c3':[10, 11, 12], 'c4':[13, 14, 15]}
df = pd.DataFrame(dict_data)
print(df)
print(type(df))
-->

   c0  c1  c2  c3  c4
0   1   4   7  10  13
1   2   5   8  11  14
2   3   6   9  12  15
<class 'pandas.core.frame.DataFrame'>

# 행 인덱스/ 열 이름 변경하기
# DataFrame객체.index = 새로운 행/열 인덱스 배열 

df.index = ['도준','미미','나나','하운']
df.columns = ['연령','성별','대학교']

# rename() 함수를 사용하여 행/열 인덱스 변경 가능
# 행 인덱스 변경: DataFrame객체.rename(index = {기존 인덱스: 새 인덱스,..})
# 열 인덱스 변경: DataFrame객체.rename(columns = {기존 인덱스: 새 인덱스,..})
# inplace = True를 쓰면 기존 객체에 반영, 쓰지 않으면 기존 객체가 변경되지 않음

df.rename(index = {'도준':'승기','미미':'이진','나나':'희도','하운':'유준'})

# 행/열 삭제 시 주의 사항
# drop() 함수 사용:
# 행을 삭제 시 axis 옵션으로 axis = 0 (x축) 혹은 미입력
# 열을 삭제 시 axis = 1 (y축)

import pandas as pd

exam_data = {'국어':[95, 80, 75],'수학':[90, 85, 80], '영어':[100, 85, 90], '음악': [75, 100, 80]}
df = pd.DataFrame(exam_data, index = ['인서', '형준', '소진'])

df2 = df
df3 =df
df2.drop('인서', axis = 0)
df3.drop(['형준','소진'])

------------------------------------------------------------------------------------------------------------------------------------
import pandas as pd

exam_data = {'국어':[95, 80, 75, 88, 92],'수학':[90, 85, 80, 79, 96], '영어':[100, 85, 90, 89, 75], '음악': [75, 100, 80, 95, 82]}
df = pd.DataFrame(exam_data, index = ['민혜', '형지', '소희', '철수', '쿠기'])

	국어	수학	영어	음악
민혜	95	90	100	75
형지	80	85	85	100
소희	75	80	90	80
철수	88	79	89	95
쿠기	92	96	75	82

df2.drop('음악', axis = 1)

	국어	수학	영어
민혜	95	90	100
형지	80	85	85
소희	75	80	90
철수	88	79	89
쿠기	92	96	75

df3.drop(['수학', '음악'], axis = 1)

국어	영어
민혜	95	100
형지	80	85
소희	75	90
철수	88	89
쿠기	92	75

# 행/ 열 선택
# 데이터 시각화 부분에서 기준이 될 행을 선택할 수 있음
# 방법:
# 인덱스 이름 기준으로 행 선택: loc (범위의 끝 인덱스 포함*)
# 정수형 위치 인덱스 기준으로 행 선택: iloc (범위의 끝 인덱스 미포함*)

# 행 인덱스 이름을 사용하여 행 1개 선택

label1 = df.loc['쿠기']
position1 = df.iloc[0]
print(label1)
print(position1)
-->
국어    92
수학    96
영어    75
음악    82
Name: 쿠기, dtype: int64

국어     95
수학     90
영어    100
음악     75
Name: 민혜, dtype: int64

# 행 인덱스 이름을 사용하여 행 2개 선택
# 해당 인덱스 연속하지 않고 지정 시 [] 1번 더하여 추가해줘야 함

label2 = df.loc[['민혜','소희']]
position2 = df.iloc[[0, 2]]

국어	수학	영어	음악
민혜	95	90	100	75
소희	75	80	90	80

	국어	수학	영어	음악
민혜	95	90	100	75
소희	75	80	90	80

label3 = df.loc['소희':'쿠기']
position3 = df.iloc[2:]
position4 = df.iloc[1:3]

	국어	수학	영어	음악
소희	75	80	90	80
철수	88	79	89	95
쿠기	92	96	75	82

	국어	수학	영어	음악
소희	75	80	90	80
철수	88	79	89	95
쿠기	92	96	75	82

	국어	수학	영어	음악
형지	80	85	85	100
소희	75	80	90	80

# 열 선택 (정수형 인덱스 위치 개념이 없음* 주의)

# '수학' 점수 데이터만 선택 (열 선택)_방법1
math = df['수학']
print(math)

민혜    90
형지    85
소희    80
철수    79
쿠기    96
Name: 수학, dtype: int64

# '영어' 점수 데이터만 선택 (열 선택)_방법2
english = df.영어
print(english)

민혜    100
형지     85
소희     90
철수     89
쿠기     75
Name: 영어, dtype: int64

# 열 2개 선택

kor_music = df[['국어','음악']]
kor_music

	국어	음악
민혜	95	75
형지	80	100
소희	75	80
철수	88	95
쿠기	92	82

# 원소 선택
# 데이터프레임의 행 인덱스와 열 이름을 [행, 열] 형식의 2차원 좌표로 입력하여 원소 위치를 지정
# loc, iloc는 행 때문에 사용
# 인덱스 이름: DataFrame객체.loc[행 인덱스 이름, 열 이름]
# 정수 위치 인덱스: DataFrame객체.iloc[행 번호, 열 번호]

# 데이터프레임 df의 특정 원소 1개 선택 (용준의 영어 점수)
a = df.loc['용준','영어']
print(a) 
--> 100

b = df.iloc[0, 2]
print(b)
--> 100

# 데이터프레임 df의 특정 원소 2개 선택 ('죠지'의 국어, 수학 점수)
c = df.loc['죠지',['국어','수학']]
print(c)
-->
국어    88
수학    79
Name: 죠지, dtype: int64

d = df.iloc[3,[0, 1]]
print(d)
-->
국어    88
수학    79
Name: 죠지, dtype: int64

# 데이터프레임 df의 특정 원소 2개 선택 ('죠지'의 국어, 수학 점수) slicing
e = df.loc['강민','국어':'수학']
print(e)
-->
국어    75
수학    80
Name: 강민, dtype: int64

f = df.iloc[2, 0:2]
print(f)
-->
국어    75
수학    80
Name: 강민, dtype: int64

# 데이터프레임 df의 행열 2*2개 원소들 선택 ('죠지','비오'의 영어, 음악 점수)

aa = df.loc['죠지':'비오', '영어':'음악']
print(aa)

bb = df.iloc[[3,4], [2,3]]
bb

cc = df.iloc[3:, 2:]
cc

-->
   영어  음악
이름        
죠지  89  95
비오  75  82

--------------------------------------------------------------------------------------------------------------------------------------------
# 열 추가
# DataFrame객체.['추가하려는 열 이름'] = 데이터 값   
 
df['과학'] = [85, 70, 90, 69, 100]
df
-->
	이름	국어	수학	영어	음악	과학						
0	용준	95	90	100	75	85
1	지희	80	85	85	100	70
2	강민	75	80	90	80	90
3	죠지	88	79	89	95	69
4	비오	92	96	75	82	100

df.loc[5] = ['하윤', 86, 92, 100, 78, 80]
df
-->
	이름	국어	수학	영어	음악	과학
0	용준	95	90	100	75	85
1	지희	80	85	85	100	70
2	강민	75	80	90	80	90
3	죠지	88	79	89	95	69
4	비오	92	96	75	82	100
5	하윤	86	92	100	78	80


# 행 추가
# 추가하려는 행 이름과 데이터 값을 loc 인덱서를 사용하여 입력
# 1. DataFrame객체.loc['추가하려는 행 이름'] = 데이터 값 / 원소 값 여러 개의 배열 입력/ 
# 2. 기존 행 복사하여 행 추가 (추가하는 행 인덱스 = 복사하는 행 인덱스)

df.loc[6] = "1"
df.loc[7] = ['라디', 100, 75, 85, 90, 88]
df.loc[8] = df.loc[6]
df
-->
	이름	국어	수학	영어	음악	과학
0	용준	95	90	100	75	85
1	지희	80	85	85	100	70
2	강민	75	80	90	80	90
3	죠지	88	79	89	95	69
4	비오	92	96	75	82	100
5	하윤	86	92	100	78	80
6	1	1	1	1	1	1
7	라디	100	75	85	90	88
8	1	1	1	1	1	1


# 원소 값 변경: DataFrame 객체의 일부분 또는 원소 선택 = 새로운 값

# Dataframe df 의 지희의 음악 점수를 바꾸기
df.iloc[1, 4]= 95
print(df)
-->
 이름   국어  수학   영어  음악   과학
                            
0  용준   95  90  100  75   85
1  지희   80  85   90  95   70
2  강민   75  80   90  80   90
3  죠지   88  79   89  95   69
4  비오   92  96   75  82  100
5  하윤   86  92  100  78   80
6   1    1   1    1   1    1
7  라디  100  75   85  90   88
8   1    1   1    1   1    1

df.loc[4][1]= 84
df
-->
	이름	국어	수학	영어	음악	과학
0	용준	95	90	100	75	85
1	지희	80	85	90	95	70
2	강민	75	80	90	80	90
3	죠지	88	79	89	95	69
4	비오	84	96	75	82	100
5	하윤	86	92	100	78	80
6	1	1	1	1	1	1
7	라디	100	75	85	90	88
8	1	1	1	1	1	1



